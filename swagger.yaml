swagger: "2.0"
info:
  description: >-
    This is the Swagger for PickUP: Connecting people to sports. Below is
    internal documentation for our API. [Visit our Github](https:www.github.com/pooteamtj/pickup)
  version: 1.0.0
  title: "Swagger PickUP"
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

host: "us-central1-pickup-proj.cloudfunctions.net"
basePath: "/api"

securityDefinitions:
  Bearer:            
    type: "apiKey"
    name: "Authorization"
    in: "header"

tags:
  - name: authentication
    description: Login and Signup
    
  - name: users
    description: User Actions  
    
  - name: events
    description: Event Actions
  
schemes:
  - https


paths:
  /signup:
    post:
      tags:
        - authentication
      summary: Add a new user
      description: ''
      operationId: signup
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Takes user parameters for signup and will send email verification.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User created!
        '400':
          description: Passwords do not match | Email is already taken | Password to short
          
  /login:
      post:
        tags:
          - authentication
        summary: Login as a user
        description: ''
        operationId: login
        consumes:
          - application/json
          - application/xml
        produces:
          - application/json
          - application/xml
        parameters:
          - in: body
            name: body
            description: Login and returns auth bearer token.
            required: true
            schema:
              $ref: '#/definitions/Login'
        responses:
          '200':
            description: Success
          '400':
            description: Fail
            
  /uploadImage:
      post:
        security: 
          - Bearer: []
        tags:
          - users
        summary: Upload profile image
        description: "This endpoint is not fully implemented here, but would otherwise take an imabe and upload it as the current user's profile picture"
        operationId: uploadImage
        consumes:
          - application/json
          - application/xml
        produces:
          - application/json
          - application/xml
        parameters: []
        responses:
          '200':
            description: Success
          '400':
            description: Fail
            
  /user:
      post:
        security: 
          - Bearer: []
        tags:
          - users
        summary: Edit user details
        description: ''
        operationId: editUserDetails
        consumes:
          - application/json
          - application/xml
        produces:
          - application/json
          - application/xml
        parameters:
          - in: body
            name: body
            description: Edits details for the current user.
            required: true
            schema:
              $ref: '#/definitions/EditUser'
        responses:
          '200':
            description: Success
          '400':
            description: Fail
            
      get:
        security: 
          - Bearer: []
        tags:
          - users
        summary: Retrieve user details
        description: 'Retrieve the details of the current user.'
        operationId: getUserDetails
        consumes:
          - application/json
          - application/xml
        produces:
          - application/json
          - application/xml
        parameters: []
        responses:
          '200':
            description: Success
          '400':
            description: Fail
            
  /user/{email}:
      get:
        security: 
          - Bearer: []
        tags:
          - users
        summary: Retrieve another users details
        description: ''
        operationId: anotherUserDetails
        consumes:
          - application/json
          - application/xml
        produces:
          - application/json
          - application/xml
        parameters:
          - name: "email"
            in: "path"
            description: "Email of user details to return."
            required: true
            type: "string"
        responses:
          '200':
            description: Success
          '400':
            description: Fail
            
  /user/updateEmail:
      post:
        security: 
          - Bearer: []
        tags:
          - users
        summary: Update user email
        description: ''
        operationId: updateEmail
        consumes:
          - application/json
          - application/xml
        produces:
          - application/json
          - application/xml
        parameters:
          - in: body
            name: body
            description: Updates the email for the current user.
            required: true
            schema:
              $ref: '#/definitions/UpdateEmail'
        responses:
          '200':
            description: Success
          '400':
            description: Fail
            
  /user/updatePassword:
      post:
        security: 
          - Bearer: []
        tags:
          - users
        summary: Update user password
        description: 'This call will send a password reset email.'
        operationId: updatePassword
        consumes:
          - application/json
          - application/xml
        produces:
          - application/json
          - application/xml
        parameters: []
        responses:
          '200':
            description: Success
          '400':
            description: Fail
            
  /events:
    post:
      security: 
        - Bearer: []
      tags:
        - events
      summary: Add an event
      description: ''
      operationId: addNewEvent
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Create a new event with given parameters
          required: true
          schema:
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Success
        '400':
          description: Fail          
    get:
      security: 
        - Bearer: []
      tags:
        - events
      summary: Retrieve all events
      description: 'This will return all events'
      operationId: getAllEvents
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters: []
      responses:
        '200':
          description: Success
        '400':
          description: Fail


  /events/{eventId}:
    get:
      security: 
        - Bearer: []
      tags:
        - events
      summary: Retrieve an event
      description: ''
      operationId: getOneEvent
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: "eventId"
          in: "path"
          description: "Id of event to return."
          required: true
          type: "string"
      responses:
        '200':
          description: Success
        '400':
          description: Fail
          
    delete:
      security: 
        - Bearer: []
      tags:
        - events
      summary: Delete an event
      description: ''
      operationId: deleteEvent
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: "eventId"
          in: "path"
          description: "Id of event to delete."
          required: true
          type: "string"
      responses:
        '200':
          description: Success
        '400':
          description: Fail

  /events/{eventId}/tag:
    get:
      security: 
        - Bearer: []
      tags:
        - events
      summary: Tag a user to an event
      description: ''
      operationId: eventTag
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: "eventId"
          in: "path"
          description: "Id of event to tag."
          required: true
          type: "string"
      responses:
        '200':
          description: Success
        '400':
          description: Fail
          
  /events/{eventId}/untag:
    get:
      security: 
        - Bearer: []
      tags:
        - events
      summary: Untag a user to an event
      description: ''
      operationId: unEventTag
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - name: "eventId"
          in: "path"
          description: "Id of event to return."
          required: true
          type: "string"
      responses:
        '200':
          description: Success
        '400':
          description: Fail
          
definitions:
  User:
    type: object
    properties:
      name:
        type: string
        description: Name of User
      email:
        type: string
        description: Email of User
      password:
        type: string
        description: Password of User
      confirmPassword:
        type: string
        description: Confirmation of User Password
    xml:
      name: Order

  Event:
    type: object
    properties:
      description:
        type: string
        description: Description for Event
      maxPeople:
        type: integer
        format: int32
        description: Max People for Event
      location:
        type: string
        description: Location for Event
      sport:
        type: string
        description: Sport for Event
      time:
        type: string
        description: Time for Event
      date:
        type: string
        description: Date for Event
    xml:
      name: Order
      
  UpdateEmail:
    type: object
    properties:
      email:
        type: string
        description: New Email for User
    xml:
      name: Order
      
  EditUser:
    type: object
    properties:
      name:
        type: string
        description: Name of User
      bio:
        type: string
        description: Bio of User
      location:
        type: string
        description: Location of User
      age:
        type: "integer"
        format: "int32"
        description: Age of User
    xml:
      name: Order
      
  Login:
    type: object
    properties:
      email:
        type: string
        description: Email of User
      password:
        type: string
        description: Password of User
        
    xml:
      name: Category
